// <auto-generated />
using System;
using LmsBackEnd;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LmsBackEnd.Migrations
{
    [DbContext(typeof(LmsContext))]
    partial class LmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LmsBackEnd.ACCOUNT", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GioiTinh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("LearningRank")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ACCOUNTs");
                });

            modelBuilder.Entity("LmsBackEnd.COMMENT", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("AccountID");

                    b.HasIndex("TopicID");

                    b.ToTable("COMMENTs");
                });

            modelBuilder.Entity("LmsBackEnd.COURSE", b =>
                {
                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CourseDuration")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filetype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.ToTable("COURSEs");
                });

            modelBuilder.Entity("LmsBackEnd.ENROLL", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AvgScore")
                        .HasColumnType("int");

                    b.Property<int>("Score1")
                        .HasColumnType("int");

                    b.Property<int>("Score2")
                        .HasColumnType("int");

                    b.HasKey("AccountID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("ENROLLs");
                });

            modelBuilder.Entity("LmsBackEnd.FEEDBACK", b =>
                {
                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedbackName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ques1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ques2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ques3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ques4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ques5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackID");

                    b.ToTable("FEEDBACKs");
                });

            modelBuilder.Entity("LmsBackEnd.FEEDBACKATTEMP", b =>
                {
                    b.Property<int>("FeedbackAttempID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Answer1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AttempWhen")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackAttempID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FeedbackID");

                    b.ToTable("FEEDBACKATTEMPs");
                });

            modelBuilder.Entity("LmsBackEnd.LESSON", b =>
                {
                    b.Property<string>("LessonID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LessonDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonDuration")
                        .HasColumnType("int");

                    b.Property<string>("LessonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLesson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonID");

                    b.HasIndex("CourseID");

                    b.ToTable("LESSONs");
                });

            modelBuilder.Entity("LmsBackEnd.Models.CLASSMEMBER", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassAdminID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CourseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructorID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("MentorID")
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("ID");

                    b.HasIndex("ClassAdminID");

                    b.HasIndex("CourseID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("MentorID");

                    b.ToTable("CLASSMEMBERs");
                });

            modelBuilder.Entity("LmsBackEnd.Models.RESPONSIBILITY", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("RESPONSIBILITIes");
                });

            modelBuilder.Entity("LmsBackEnd.NOTIFY", b =>
                {
                    b.Property<string>("NotifyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutDated")
                        .HasColumnType("bit");

                    b.Property<string>("NotifyDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotifyID");

                    b.ToTable("NOTIFIes");
                });

            modelBuilder.Entity("LmsBackEnd.POINT", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSubmit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("point")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("POINTs");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZ", b =>
                {
                    b.Property<string>("QuizID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LessonID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuizName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("QuizID");

                    b.HasIndex("LessonID");

                    b.ToTable("QUIZs");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZATTEMP", b =>
                {
                    b.Property<string>("AttempID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AccountID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("QuizID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("AttempID");

                    b.ToTable("QUIZATTEMPs");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZBODY", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<int>("QuestionScore")
                        .HasColumnType("int");

                    b.Property<string>("QuizID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WrongAnswer1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WrongAnswer2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WrongAnswer3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuizID");

                    b.ToTable("QUIZBODIes");
                });

            modelBuilder.Entity("LmsBackEnd.ROLE", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("ROLEs");
                });

            modelBuilder.Entity("LmsBackEnd.TOPIC", b =>
                {
                    b.Property<string>("TopicID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOutDated")
                        .HasColumnType("bit");

                    b.Property<string>("TopicDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicID");

                    b.ToTable("TOPICs");
                });

            modelBuilder.Entity("LmsBackEnd.COMMENT", b =>
                {
                    b.HasOne("LmsBackEnd.ACCOUNT", null)
                        .WithMany("COMMENTS")
                        .HasForeignKey("AccountID");

                    b.HasOne("LmsBackEnd.TOPIC", null)
                        .WithMany("COMMENTS")
                        .HasForeignKey("TopicID");
                });

            modelBuilder.Entity("LmsBackEnd.ENROLL", b =>
                {
                    b.HasOne("LmsBackEnd.ACCOUNT", "ACCOUNT")
                        .WithMany("ENROLLS")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LmsBackEnd.COURSE", "COURSE")
                        .WithMany("ENROLLs")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ACCOUNT");

                    b.Navigation("COURSE");
                });

            modelBuilder.Entity("LmsBackEnd.FEEDBACKATTEMP", b =>
                {
                    b.HasOne("LmsBackEnd.ACCOUNT", null)
                        .WithMany("FeedbackAttemps")
                        .HasForeignKey("AccountID");

                    b.HasOne("LmsBackEnd.FEEDBACK", "Feedback")
                        .WithMany("FeedbackAttemps")
                        .HasForeignKey("FeedbackID");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("LmsBackEnd.LESSON", b =>
                {
                    b.HasOne("LmsBackEnd.COURSE", "COURSE")
                        .WithMany("LESSONs")
                        .HasForeignKey("CourseID");

                    b.Navigation("COURSE");
                });

            modelBuilder.Entity("LmsBackEnd.Models.CLASSMEMBER", b =>
                {
                    b.HasOne("LmsBackEnd.ACCOUNT", "CLASSADMIN")
                        .WithMany()
                        .HasForeignKey("ClassAdminID");

                    b.HasOne("LmsBackEnd.COURSE", "COURSE")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LmsBackEnd.ACCOUNT", "INSTRUCTOR")
                        .WithMany()
                        .HasForeignKey("InstructorID");

                    b.HasOne("LmsBackEnd.ACCOUNT", "MENTOR")
                        .WithMany()
                        .HasForeignKey("MentorID");

                    b.Navigation("CLASSADMIN");

                    b.Navigation("COURSE");

                    b.Navigation("INSTRUCTOR");

                    b.Navigation("MENTOR");
                });

            modelBuilder.Entity("LmsBackEnd.Models.RESPONSIBILITY", b =>
                {
                    b.HasOne("LmsBackEnd.ACCOUNT", "ACCOUNT")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LmsBackEnd.COURSE", "COURSE")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ACCOUNT");

                    b.Navigation("COURSE");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZ", b =>
                {
                    b.HasOne("LmsBackEnd.LESSON", null)
                        .WithMany("QUIZS")
                        .HasForeignKey("LessonID");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZBODY", b =>
                {
                    b.HasOne("LmsBackEnd.QUIZ", null)
                        .WithMany("QUIZBODYS")
                        .HasForeignKey("QuizID");
                });

            modelBuilder.Entity("LmsBackEnd.ACCOUNT", b =>
                {
                    b.Navigation("COMMENTS");

                    b.Navigation("ENROLLS");

                    b.Navigation("FeedbackAttemps");
                });

            modelBuilder.Entity("LmsBackEnd.COURSE", b =>
                {
                    b.Navigation("ENROLLs");

                    b.Navigation("LESSONs");
                });

            modelBuilder.Entity("LmsBackEnd.FEEDBACK", b =>
                {
                    b.Navigation("FeedbackAttemps");
                });

            modelBuilder.Entity("LmsBackEnd.LESSON", b =>
                {
                    b.Navigation("QUIZS");
                });

            modelBuilder.Entity("LmsBackEnd.QUIZ", b =>
                {
                    b.Navigation("QUIZBODYS");
                });

            modelBuilder.Entity("LmsBackEnd.TOPIC", b =>
                {
                    b.Navigation("COMMENTS");
                });
#pragma warning restore 612, 618
        }
    }
}
